import { Client, Events, IntentsBitField, TextChannel } from 'discord.js';
import express from 'express';

require('dotenv').config({ path: '.env.tokens' });

class DiscordBot {
  client: Client;
  private channelId: string;
  private webhook: express.Express = express();
  private reconnectAttempts: number = 0;
  private readonly maxReconnectAttempts: number = 5;

  constructor() {
    this.channelId = process.env.DISCORD_CHANNEL_ID!;
    this.client = new Client({
      intents: [
        IntentsBitField.Flags.Guilds,
        IntentsBitField.Flags.GuildMessages
      ]
    });

    this.setupWebhook();
    this.setupDiscordEvents();
  }

  private setupWebhook() {
    this.webhook = express();
    this.webhook.use(express.json());

    this.webhook.post('/webhook', async (req, res) => {
      console.log('–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å:', req.body);
      const { channelId, tag, nameChat, dateString } = req.body;

      try {
        if (nameChat) {
          await this.sendMessage(channelId, tag, nameChat, dateString);
          console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          res.status(200).send('Message sent');
        } else {
          console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ');
          res.status(400).send('Parameter required');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
        res.status(500).send('Internal server error');
      }
    });

    const port = process.env.WEBHOOK_PORT || 3000;
    this.webhook.listen(port, () => {
      console.log(`Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });
  }

  private setupDiscordEvents() {
    this.client.on(Events.ClientReady, () => {
      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord');
      this.reconnectAttempts = 0;
    });

    this.client.on(Events.Error, async (error) => {
      console.error('–û—à–∏–±–∫–∞ Discord –∫–ª–∏–µ–Ω—Ç–∞:', error);
      await this.handleReconnect();
    });

    this.client.on('disconnect', async () => {
      console.log('–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Discord');
      await this.handleReconnect();
    });
  }

  private async handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      process.exit(1);
    }

    this.reconnectAttempts++;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);

    try {
      await this.client.destroy();
      await this.client.login(process.env.DISCORD_BOT_TOKEN);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      setTimeout(() => this.handleReconnect(), 5000 * this.reconnectAttempts);
    }
  }

  async sendMessage(channelId: string, tag: string, nameChat: string, dateString: string) {
    try {
      const channel = await this.client.channels.fetch(channelId) as TextChannel;

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–æ–ª–∏
      const mention = tag.startsWith('role-')
        ? `<@&${tag.replace('role-', '')}>` // –î–ª—è —Ä–æ–ª–µ–π (–µ—Å–ª–∏ `tag` –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "role-")
        : `<@${tag}>`; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

      await channel.send(
        `üö®üö®üö® ${mention} üö®üö®üö®\n` +
        `# üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û–±—ä—è–≤–ª–µ–Ω —Å–±–æ—Ä!\n` +
        `üìå –í —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–µ: **"${nameChat}"**\n` +
        `üïí –û–±—ä—è–≤–ª–µ–Ω–æ: *${dateString}*\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
        `üî• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–±–æ—Ä—É! üî•`
      );

      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channel}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async start() {
    try {
      await this.client.login(process.env.DISCORD_BOT_TOKEN);
      console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new DiscordBot();
bot.start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  bot.client.destroy();
});
process.once('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  bot.client.destroy();
});